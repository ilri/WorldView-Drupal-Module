<?php

// $Id$

/**
 * Copyright 2011 ILRI
 *
 * This file is part of WorldView.
 * 
 * WorldView is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * WorldView is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with WorldView.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * Initialize the WorldView Google Earth interface.
 *
 * This function loads external resources that are used by the WorldView 
 * module. Mainly it lods the module specific css-files.
*/
function WorldView_init() {
	drupal_add_css(drupal_get_path('module', 'WorldView') . '/WorldView.css');
	include_once(drupal_get_path('module', 'WorldView') . '/WorldView.inc');
	include_once(drupal_get_path('module', 'WorldView') . '/WorldView.database.inc');
	include_once(drupal_get_path('module', 'WorldView') . '/WorldView.databridge.inc');
	include_once(drupal_get_path('module', 'WorldView') . '/WorldView.google_earth.inc');
	include_once(drupal_get_path('module', 'WorldView') . '/WorldView.google_maps.inc');
	if (variable_get('worldview_api_key', '') != '') {
	  drupal_add_js('https://www.google.com/jsapi?key=' . variable_get('worldview_api_key', ''), 'external');
	  drupal_add_js(drupal_get_path('module', 'WorldView') . '/WorldView.js');
	}  
  drupal_add_js('http://maps.googleapis.com/maps/api/js?sensor=false', 'external');
}

/** 
 * Generates a user help page. 
 *
 * Creates a help page for the WorldView module. Explains configuration, usage 
 * and some tips and tricks on what can be done.
 *
 * @param string $path
 *   The router menu path, as defined in WorldView_menu().
 * @param array $arg
 *   An array that corresponds to the return value of the arg() function, for 
 *   modules that want to provide help that is specific to certain values of 
 *   wildcards in $path. For example, you could provide help for the path 
 *   'user/1' by looking for the path 'user/%' and $arg[1] == '1'. This array 
 *   should always be used rather than directly invoking arg(), because your 
 *   hook implementation may be called for other purposes besides building the 
 *   current page's help. Note that depending on which module is invoking 
 *   hook_help, $arg may contain only empty strings. Regardless, $arg[0] to 
 *   $arg[11] will always be set.
 *   
 * @return string
 *   A localized string containing the help text.
*/
function WorldView_help($path, $arg){
  $help_output = '';
  return $help_output;
}

/**
 * Handles module permissions.
 *
 * Defines the permissions that are used by the WorldView module. The 
 * permissions are: 
 * - "access WorldView": Browse the maps in general and see open information.
 *   To comply with googles standards of openness this has to be set for all 
 *   users, even anonymous users, if you don't have a paid google earth 
 *   license.
 * - "access WorldView private": Private information is intended for 
 *   Authorized Users. If there is no sensitive information on your map 
 *   disregard this permission.
 * - "administer WorldView": Allows users to administer the WorldView module.
 *
 * @return array 
 *   An array of permission strings. The strings must not be wrapped with the 
 *   t() function, since the string extractor takes care of extracting 
 *   permission names defined in the perm hook for translation.
*/
function WorldView_permission(){
  return array('administer WorldView' => array(
                 'title' => t('Administer WorldView'),
                 'description' => t('Allows a user to administer the maps and 
                                     settings of the WorldView module.'),
               ),
               'access WorldView' => array(
                 'title' => t('Access WorldView'),
                 'description' => t('To comply with googles standards of 
                                     openness this has to be set for all 
                                     users, even anonymous users, if you 
                                     don\'t have a paid google earth license.'
                                     ),
               ), 
              );
}

/**
 * Creates the administration form for the WorldView module.
 *
 * Creates the administration form for the WorldView module, the form can be 
 * found at /admin/settings/WorldView as defined in WorldView_menu.
 *
 * @return array $form
 *   A drupal form formatted by system_settings_form().
*/
function WorldView_admin() {
  $form = array();
  $form['worldview_google'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Maps/Earth Settings'),
    '#collapsible' => TRUE,
  );
  $form['worldview_google']['worldview_default'] = 
    array('#type' => 'select',
    '#title' => t('Default Mapping Mode'),
    '#default_value' => variable_get('worldview_default', 'google_earth'),
    '#options' => array('google_maps' => 'Google Maps v. 3.5',
                        'google_earth' => 'Google Earth'),
    '#description' => t('Select the default mapping mode for the WorldView 
                         maps. If Google Earth is set to default the system
                         will fallback to Google Maps if the Google Earth 
                         plugin is not installed.'),
    '#required' => TRUE,
    );
  $form['worldview_google']['worldview_api_key'] = 
    array('#type' => 'textfield',
	  '#title' => t('Google Maps API key'),
	  '#default_value' => variable_get('worldview_api_key', ''),
	  '#size' => 120,
	  '#maxlength' => 90,
	  '#description' => t('To use google maps or google earth you need to get an 
	                       API key from Google. You can get an API key ' . 
	                       l('here', 
	                         'http://code.google.com/apis/maps/signup.html') . 
	                       '. Remember that you have to register a unique key for
	                       each domain. Use http://localhost as host for local 
	                       debugging.'),
	  '#required' => TRUE,
	  );
	$form['worldview_map'] = array(
    '#type' => 'fieldset',
    '#title' => t('Map Settings'),
    '#collapsible' => TRUE,
  );
  $form['worldview_map']['worldview_zoom'] = 
    array('#type' => 'textfield',
	  '#title' => t('Map Zoom Level'),
	  '#default_value' => variable_get('worldview_zoom', 7),
	  '#size' => 2,
	  '#maxlength' => 2,
	  '#description' => t('The default zoom level of the maps. 
	                       Between 0 (entire world) and 21 (individual buildings). 
	                       Default: 7.'),
	  '#required' => TRUE,
    );
  $form['worldview_map']['worldview_lat'] = 
    array('#type' => 'textfield',
    '#title' => t('Map Center: Latitude'),
    '#default_value' => variable_get('worldview_lat', 0),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('The map center latitude. Default: 0 (equator).'),
    '#required' => TRUE,
    );
  $form['worldview_map']['worldview_lon'] = 
    array('#type' => 'textfield',
    '#title' => t('Map Center: Longitude'),
    '#default_value' => variable_get('worldview_lon', 38),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('The map center longitude. Default: 38 (Kenya).'),
    '#required' => TRUE,
    );
	$form['worldview_friends'] = array(
    '#type' => 'fieldset',
    '#title' => t('Compatible modules'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['worldview_friends']['worldview_databridge'] = 
    array('#type' => 'checkbox',
    '#title' => t('Databridge LIMS interface'),
    '#default_value' => variable_get('worldview_databridge', False),
    '#description' => t('Imports data from databridge and shows it on the map.'),
    );
  return system_settings_form($form); 
}

/**
 * Creates the WorldView paths and menu items.
 *
 * Defines paths to WorldView pages and defines WorldView menu items. The 
 * items that are defined are:
 * - admin/config/content/WorldView: This is the administration page
 * - /worldview: This is the KML generation hook
*/
function WorldView_menu() {
  $items = array();
  $items['admin/config/content/worldview'] = 
    array('title' => 'WorldView',
	  'description' => 'Administration page for the WorldView module.',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('WorldView_admin'),
	  'access arguments' => array('administer WorldView'),
	  'type' => MENU_NORMAL_ITEM,
	  );
	$items['worldview/kml'] =
    array('page callback' => 'WorldView_KML',
	  'access arguments' => array('access WorldView'),
	  'type' => MENU_CALLBACK,
	  );
	$items['worldview/data'] =
    array('page callback' => 'WorldView_data',
	  'access arguments' => array('access WorldView'),
	  'type' => MENU_CALLBACK,
	  );
	$items['worldview/settings'] =
    array('page callback' => 'WorldView_get_settings',
	  'access arguments' => array('access WorldView'),
	  'type' => MENU_CALLBACK,
	  );
	$items['worldview/edit'] =
    array('page callback' => 'WorldView_edit',
	  'access arguments' => array('administer WorldView'),
	  'type' => MENU_CALLBACK,
	  );
  return $items;
}

/**
 * Creates the blocks of the WorldView module.
 *
 * Creates the block content for the WorldView module. One block is created,
 * which holds the map.
 * 
 * @return array $blocks
*/
function WorldView_block_info(){
  $blocks = array();
  
  // This is the map block
  $blocks['WorldView_map'] = array(
    'info' => t('WorldView Map'),
  );
  
  return $blocks;
}

/**
 * The main WorldView blocks view. This is where the maps and controls are!
 *
 * The pages of the WorldView module are rendered here, Most of the actual 
 * rendering is made using external functions but this function passes them 
 * to the renderer.
 *
 * @param string $delta
 *   Which block to render. This is a unique identifier for the block within 
 *   the module, defined in WorldView_block_info().
 *
 * @return array $page_content
 *   An array containing the following elements:
 *   - subject: The default localized title of the block. If the block does 
 *     not have a default title, this should be set to NULL.
 *   - content: The content of the block's body. This may be a renderable 
 *     array (preferable) or a string containing rendered HTML content.
*/
function WorldView_block_view($delta = '') {
  $page_content = array('subject' => '',
                        'content' => '<div id="WorldView">',);
  
  if (module_exists('locale')) {
    $languages = language_list();
    // Todo: Implement translations
  }
  
  if ($delta == 'WorldView_map') {
    $page_content['content'] .= '<div id="WorldView_map"></div>';
    $page_content['content'] .= '<div id="WorldView_tou">';
    $page_content['content'] .= t('Before using this tool please read and understand Googles ' .  l(t('Terms of Use'), 'http://code.google.com/apis/maps/terms.html') . '.');
    $page_content['content'] .= '</div>';
  }
  
  $page_content['content'] .= '</div>';
  return $page_content;
}

/**
 * Callback for worldview/edit. Adds, edits and deletes entries from the map.
 *
 * @param $id = NULL
 *   If set, the function will edit or delete an existing entry.
 *
 * @return string $html
 *   String containing the returned html.
*/
function WorldView_edit($id = NULL) {
  $page_content  = '';
  $page_content .= '<div id="WorldView_input">';
  $page_content .= drupal_render(drupal_get_form('WorldView_input', WorldView_load($id)));
  $page_content .= '</div>';
  return $page_content;
}
